version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cohub_database
    environment:
      POSTGRES_DB: room_reservation
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cohub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d room_reservation"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cohub_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cohub_network
    restart: unless-stopped

  # Go Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cohub_backend
    environment:
      - ENVIRONMENT=production
      - PORT=8080
      - DATABASE_URL=postgres://admin:password123@postgres:5432/room_reservation?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=cohub-demo-secret-key-2025
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cohub_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # React Frontend (User App)
  frontend:
    build:
      context: ./webapp-reservation
      dockerfile: Dockerfile
    container_name: cohub_frontend
    environment:
      - VITE_API_URL=http://localhost:8080/api/v1
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - cohub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 2

  # Admin Panel (React TypeScript with shadcn/ui)
  admin:
    build:
      context: ./reservation-backoffice
      dockerfile: Dockerfile
    container_name: cohub_admin
    environment:
      - VITE_API_URL=http://localhost:8080/api/v1
      - VITE_APP_TITLE=CoHub Admin Panel
      - NODE_ENV=production
    ports:
      - "3001:80"
    depends_on:
      - api
    networks:
      - cohub_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.localhost`)"
      - "traefik.http.services.admin.loadbalancer.server.port=80"

  # Database Admin Tool (for demo purposes)
  adminer:
    image: adminer:latest
    container_name: cohub_database_admin
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    networks:
      - cohub_network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  cohub_network:
    driver: bridge
    name: cohub_network