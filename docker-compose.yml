version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: room_reservation_db
    environment:
      POSTGRES_DB: room_reservation
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - room_reservation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d room_reservation"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: room_reservation_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - room_reservation_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: room_reservation_api
    environment:
      - ENVIRONMENT=development
      - PORT=8080
      - DATABASE_URL=postgres://admin:password123@postgres:5432/room_reservation?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - LOG_LEVEL=info
      - SMTP_HOST=mailhog
      - SMTP_PORT=1025
      - SMTP_USER=
      - SMTP_PASSWORD=
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - room_reservation_network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Frontend React App (Development)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: room_reservation_frontend
  #   environment:
  #     - REACT_APP_API_URL=http://localhost:8080/api/v1
  #     - CHOKIDAR_USEPOLLING=true
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   networks:
  #     - room_reservation_network
  #   restart: unless-stopped

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: room_reservation_mailhog
    ports:
      - "1025:1025"  # SMTP port
      - "8025:8025"  # Web interface
    networks:
      - room_reservation_network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: room_reservation_adminer
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - room_reservation_network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  room_reservation_network:
    driver: bridge